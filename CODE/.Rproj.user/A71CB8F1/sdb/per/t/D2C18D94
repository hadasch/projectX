{
    "collab_server" : "",
    "contents" : "rm(list = ls())\nsetwd(\"D:/User/pschmidt/Desktop/Rath/Final/Publication\")\nvar   <- \"TMGES\"\n\nrequire(asreml)\nrequire(psych)\nlibrary(ggplot2)\n\n# Create empty Vector List\nvlist <- function(lnam){\n  lnam <- matrix(list(),4,1)\n  names(lnam) <- newsors\n  return(lnam)\n}\n\n# Creat empty Matrix List\nmlist <- function(lnam){\n  lnam <- matrix(list(),4,4)\n  row.names(lnam) <- dns\n  colnames(lnam)  <- vcns\n  return(lnam)\n}\n\nsortis  <- c(\"DMK1\" , \"BSA1\"  , \"DMK2\" , \"BSA2\")\nnewsors <- c(\"B2_PC\", \"B2_BSA\", \"B3_PC\", \"B3_BSA\")\ndns     <- paste(\"d:\",newsors,sep=\"\")\nvcns    <- paste(\"vc:\",newsors,sep=\"\")\n\n# import datasets\nimport <- function(sorti){\n  data_file    <- paste(\"DATA/SAS Stage I export/\",sorti,\"_\",var,\"_wt.txt\",sep=\"\")\n  data    <- read.delim(data_file)\n  data$Y  <- as.factor(data$Y)\n  data$L  <- as.factor(data$L)\n  data$G  <- as.factor(data$G)\n  data$Mu <- 1\n  return(data)\n}\n\ndat_B2PC  <- import(\"DMK1\")\ndat_B2BSA <- import(\"BSA1\")\ndat_B3PC  <- import(\"DMK2\")\ndat_B3BSA <- import(\"BSA2\")\ndatasets <- list(dat_B2PC, dat_B2BSA, dat_B3PC, dat_B3BSA)\nnames(datasets) <- newsors\n\n#############################################################################\n#sink(\"Console Output.txt\")\n#############################################################################\n# create G.Param Templates\ngr <- asreml(fixed    = Estimate ~ -1 + Mu ,\n             random   = ~ G + Y + L + Y:L + Y:G + L:G + Y:L:G,\n             data     = dat_B3PC, weights = weight_Smith,\n             family   = asreml.gaussian(dispersion=1.0),\n             ran.order=\"user\", start.values = T)\ngrtab <- gr$gammas.table\ngftab <- grtab[2:8,]\n\n#############################################################################\n# Estimate VCs for datasets\n\nRPars <- vlist(RPars)\nFPars <- vlist(FPars)\n\nfor (d in 1:4){\ngran <- asreml(fixed    = Estimate ~ -1 + Mu ,\n               random   = ~ G + Y + L + Y:L + Y:G + L:G + Y:L:G,\n          data     = datasets[[d]], weights = weight_Smith,\n          family   = asreml.gaussian(dispersion=1.0),\n          control  = asreml.control(workspace=12e7, maxiter=100),\n          ran.order=\"user\")\n          print(paste(\"Get VC - d:\",newsors[d],sep=\"\"))\n\nrvc  <- summary(gran)$varcomp\nGpar <- data.frame(Gamma=grtab$Gamma, Value=rvc$component, Constraint=\"F\")\nGpar$Constraint <- c(\"F\", \"P\", \"P\", \"P\", \"F\", \"F\", \"F\", \"F\")\n\nRPars[[d]]     <- Gpar\nGpar           <- Gpar[2:8,]\nrownames(Gpar) <- NULL\nFPars[[d]]     <- Gpar\nrm(list=c(\"gran\",\"rvc\", \"Gpar\"))\n}\n\n#############################################################################\n# Fix VC to fixed model for all other datasets\n\nvdblues <- mlist(vdblues)\nGBLUEs  <- mlist(GBLUEs)\nn_g     <- mlist(n_g)\nfconv   <- mlist(fconv)\n\nfor (d in 1:4){\n  for (vc in 1:4){\n    g_fix<- asreml(fixed    = Estimate ~ G ,\n                   random   = ~ Y + L + Y:L + Y:G + L:G + Y:L:G,\n                   data     = datasets[[d]], weights  = weight_Smith,\n                   family   = asreml.gaussian(dispersion=1.0),\n                   control  = asreml.control(workspace=12e7, maxiter=100),\n                   G.param  = FPars[[vc]],\n                   ran.order=\"user\")\n    print(paste(\"Fixed Model - d:\",newsors[d],\" vc:\",newsors[vc],sep=\"\"))\n                    if(g_fix$converge==F){\n                      orpar <- FPars[[vc]]\n                      orpar[1:3,2] <- c(0.1,0.1,0.1)\n                      g_fix<- asreml(fixed    = Estimate ~ G ,\n                                     random   = ~ Y + L + Y:L + Y:G + L:G + Y:L:G,\n                                     data     = datasets[[d]], weights  = weight_Smith,\n                                     family   = asreml.gaussian(dispersion=1.0),\n                                     control  = asreml.control(workspace=12e7, maxiter=100),\n                                     G.param  = orpar,\n                                     ran.order=\"user\")\n                      print(paste(\"Fixed Model - d:\",newsors[d],\" vc:\",newsors[vc],sep=\"\"))\n                    }\n    \n    vdblues[[d,vc]] <- predict(g_fix, classify=\"G\")$pred$avsed^2\n    GBLUEs[[d,vc]]  <- predict(g_fix, classify=\"G\")$pred$pvals[,c('G','predicted.value')]\n    n_g[[d,vc]]     <- dim(GBLUEs[[d,vc]])[1]\n    \n    if(g_fix$converge==T){fconv[[d,vc]]<-T}else{fconv[[d,vc]]<-F}\n    rm(list=c(\"g_fix\"))\n  }\n}\n\n#############################################################################\n# Fix VC to random model for all other datasets\n\nVCs       <- mlist(VC)\nVCgs      <- mlist(VCg)\nVCp_maxs  <- mlist(VCp_max)\nVCp_hars  <- mlist(VCp_har)\nVCp_hars2 <- mlist(VCp_har)\nvdblups   <- mlist(vdblups)\nMu_rans   <- mlist(Mu_ran)\nGBLUPs    <- mlist(GBLUPs)\ntrialdims <- mlist(trialdims)\nrconv     <- mlist(rconv)\n\nfor (d in 1:4){\n  for (vc in 1:4){\n    g_ran<- asreml(fixed    = Estimate ~ -1 + Mu ,\n                   random   = ~ G + Y + L + Y:L + Y:G + L:G + Y:L:G,\n                   data     = datasets[[d]], weights  = weight_Smith,\n                   family   = asreml.gaussian(dispersion=1.0),\n                   control  = asreml.control(workspace=12e7, maxiter=100),\n                   G.param  = RPars[[vc]],\n                   ran.order=\"user\")\n    print(paste(\"Random Model - d:\",newsors[d],\" vc:\",newsors[vc],sep=\"\"))\n                    if(g_ran$converge==F){\n                      orpar <- RPars[[vc]]\n                      orpar[2:4,2] <- c(0.1,0.1,0.1)\n                      g_ran<- asreml(fixed    = Estimate ~ -1 + Mu ,\n                                     random   = ~ G + Y + L + Y:L + Y:G + L:G + Y:L:G,\n                                     data     = datasets[[d]], weights  = weight_Smith,\n                                     family   = asreml.gaussian(dispersion=1.0),\n                                     control  = asreml.control(workspace=12e7, maxiter=100),\n                                     G.param  = orpar,\n                                     ran.order=\"user\")\n                      print(paste(\"Random Model - d:\",newsors[d],\" vc:\",newsors[vc],sep=\"\"))\n                    }\n    \n  # Get output\n    source(\"SCRIPT/3b standard & holland.R\")\n    trialdims[[d,vc]] <- trialds\n    VCs[[d,vc]]       <- VC\n    VCgs[[d,vc]]      <- VCg\n    VCp_maxs[[d,vc]]  <- VCp_max\n    VCp_hars[[d,vc]]  <- VCp_har\n    VCp_hars2[[d,vc]] <- VCp_har2\n    vdblups[[d,vc]]   <- predict(g_ran, classify=\"G\")$pred$avsed^2\n    Mu_rans[[d,vc]]   <- predict(g_ran, classify=\"Mu\")$pred$pvals$predicted.value\n    GBLUPs[[d,vc]]    <- data.frame(g_ran$coefficients$random[1:n_g[[d,vc]]])\n    \n    if(g_ran$converge==T){rconv[[d,vc]]<-T}else{rconv[[d,vc]]<-F}\n    rm(list=c(\"g_ran\",\"trialds\",\"VC\",\"VCg\",\"VCp_max\",\"VCp_har\",\"VCp_har2\"))\n  }\n}\n\n##############################################################################\n# Combine BLUEs and BLUPs\nGpreds      <- mlist(Gpreds)\n\nfor (d in 1:4){\n  for (vc in 1:4){\n    Gpreds[[d,vc]] <- data.frame(GBLUPs[[d,vc]][1], \n                                 GBLUEs[[d,vc]], \n                                 GBLUEs[[d,vc]][,2]-Mu_rans[[d,vc]], \n                                 GBLUEs[[d,vc]][,2]-mean(GBLUEs[[d,vc]][,2]))\n    colnames(Gpreds[[d,vc]]) <- c(\"GBLUPs\",\n                                  \"gen\",\n                                  \"GBLUEs\",\n                                  \"scaledGBLUEs1\",\n                                  \"scaledGBLUEs2\")\n  }\n}\n\n# Estimate H2\nH2Standard  <- mlist(H2Standard)\nH2HollandBad<- mlist(H2HollandBad)\nH2Holland   <- mlist(H2Holland)\nH2Piepho    <- mlist(H2Piepho)\nH2Cullis    <- mlist(H2Cullis)\nH2RegPred   <- mlist(H2RegPred)\nH2RegPred2  <- mlist(H2RegPred2)\nH2RegPred3  <- mlist(H2RegPred3)\nH2SumDSum   <- mlist(H2SumDSum)\nH2SumDSum2  <- mlist(H2SumDSum2)\n\n\nfor (d in 1:4){\n  for (vc in 1:4){\n    H2Standard[[d,vc]] <- as.numeric(VCgs[[d,vc]]/VCp_maxs[[d,vc]])\n    H2HollandBad[[d,vc]]  <- as.numeric(VCgs[[d,vc]]/VCp_hars[[d,vc]])\n    H2Holland[[d,vc]] <- as.numeric(VCgs[[d,vc]]/VCp_hars2[[d,vc]])\n    H2Piepho[[d,vc]]   <- VCgs[[d,vc]] / (VCgs[[d,vc]] + vdblues[[d,vc]]/2)\n    H2Cullis[[d,vc]]   <- 1-(vdblups[[d,vc]] / 2 / VCgs[[d,vc]])\n    H2RegPred[[d,vc]]  <- lm(formula = Gpreds[[d,vc]]$GBLUPs ~ 0 + Gpreds[[d,vc]]$scaledGBLUEs1)$coefficients\n    H2RegPred2[[d,vc]] <- lm(formula = Gpreds[[d,vc]]$GBLUPs ~ 0 + Gpreds[[d,vc]]$scaledGBLUEs2)$coefficients\n    H2RegPred3[[d,vc]] <- lm(formula = Gpreds[[d,vc]]$GBLUPs ~     Gpreds[[d,vc]]$GBLUEs)$coefficients[2]\n    H2SumDSum[[d,vc]]  <- sum(abs(Gpreds[[d,vc]]$GBLUPs))/sum(abs(Gpreds[[d,vc]]$scaledGBLUEs1))\n    H2SumDSum2[[d,vc]] <- sum(abs(Gpreds[[d,vc]]$GBLUPs))/sum(abs(Gpreds[[d,vc]]$scaledGBLUEs2))\n  }\n}\n\n#file.show(\"Console Output.txt\")\n#sink(type = \"message\")\n#sink()\n\n##############################################################################\n# Delete results from unconverged models\nfco <- fconv==FALSE\nrco <- rconv==FALSE\n\ndelconv <- function(x){\n  a <- deparse(substitute(x))\n  x[fco] <- 0\n  x[rco] <- 0\n  y <- data.frame(matrix(unlist(x), nrow=4, byrow=F))\n  colnames(y) <- newsors\n  y$Data <- newsors\n  y$Method <- a\n  return(y)\n}\n\nH2Standard  <- delconv(H2Standard)\nH2HollandBad<- delconv(H2HollandBad)\nH2Holland   <- delconv(H2Holland)\nH2Piepho    <- delconv(H2Piepho)\nH2Cullis    <- delconv(H2Cullis)\nH2RegPred   <- delconv(H2RegPred)\nH2RegPred2  <- delconv(H2RegPred2)\nH2RegPred3  <- delconv(H2RegPred3)\nH2SumDSum   <- delconv(H2SumDSum)\nH2SumDSum2  <- delconv(H2SumDSum2)\n\n##############################################################################\n# Transpose Results\ntransposeres <- function(resu){\n  a <- data.frame(VC=rownames(t(resu[1,-5:-6])),\n                  t(resu[1,-5:-6]),\n                  Data=resu$Data[1],\n                  Method=resu$Method)\n  colnames(a)[2] <- \"Estimate\"\n  b <- data.frame(VC=rownames(t(resu[2,-5:-6])),\n                  t(resu[2,-5:-6]),\n                  Data=resu$Data[2],\n                  Method=resu$Method)\n  colnames(b)[2] <- \"Estimate\"\n  c <- data.frame(VC=rownames(t(resu[3,-5:-6])),\n                  t(resu[3,-5:-6]),\n                  Data=resu$Data[3],\n                  Method=resu$Method)\n  colnames(c)[2] <- \"Estimate\"\n  d <-data.frame(VC=rownames(t(resu[4,-5:-6])),\n                 t(resu[4,-5:-6]),\n                 Data=resu$Data[4],\n                 Method=resu$Method)\n  colnames(d)[2] <- \"Estimate\"\n  t_resu <- rbind(a,b,c,d)\n  rownames(t_resu) <- NULL\n  return(t_resu)\n}\n\nt_H2Standard  <- transposeres(H2Standard)\nt_H2HollandBad<- transposeres(H2HollandBad)\nt_H2Holland   <- transposeres(H2Holland)\nt_H2Piepho    <- transposeres(H2Piepho)\nt_H2Cullis    <- transposeres(H2Cullis)\nt_H2RegPred   <- transposeres(H2RegPred)\nt_H2RegPred2  <- transposeres(H2RegPred2)\nt_H2RegPred3  <- transposeres(H2RegPred3)\nt_H2SumDSum   <- transposeres(H2SumDSum)\nt_H2SumDSum2  <- transposeres(H2SumDSum2)\n\nh2 <- rbind(t_H2Standard,\n            t_H2HollandBad,\n            t_H2Holland,\n            t_H2Piepho,\n            t_H2Cullis,\n            t_H2RegPred,\n            t_H2RegPred2,\n            t_H2RegPred3,\n            t_H2SumDSum,\n            t_H2SumDSum2)\nh2$dataorder <- 0\nh2[which(h2$Data==\"B2_BSA\"),\"dataorder\"] <- 1\nh2[which(h2$Data==\"B2_PC\"),\"dataorder\"]  <- 2\nh2[which(h2$Data==\"B3_BSA\"),\"dataorder\"] <- 3\nh2[which(h2$Data==\"B3_PC\"),\"dataorder\"]  <- 4\nh2 <- h2[order(h2$dataorder,h2$VC),]\nrownames(h2) <- NULL\n\n###########################################################################\n# H2 order\nh2$H_order <- 0\nh2[which(h2$Method==\"H2Standard\"),]$H_order   <- 1 \nh2[which(h2$Method==\"H2HollandBad\"),]$H_order <- 2 \nh2[which(h2$Method==\"H2Holland\"),]$H_order    <- 3 \nh2[which(h2$Method==\"H2Piepho\"),]$H_order     <- 4\nh2[which(h2$Method==\"H2Cullis\"),]$H_order     <- 5 \nh2[which(h2$Method==\"H2RegPred\"),]$H_order    <- 6 \nh2[which(h2$Method==\"H2RegPred2\"),]$H_order   <- 7\nh2[which(h2$Method==\"H2RegPred3\"),]$H_order   <- 8\nh2[which(h2$Method==\"H2SumDSum\"),]$H_order  <- 9\nh2[which(h2$Method==\"H2SumDSum2\"),]$H_order <- 10\n\n# H2 labels\nh2$H_lab <- 0\nh2[which(h2$Method==\"H2Standard\"),]$H_lab   <- \"H2 Standard\" \nh2[which(h2$Method==\"H2HollandBad\"),]$H_lab <- \"H2 Holland Bad\" \nh2[which(h2$Method==\"H2Holland\"),]$H_lab    <- \"H2 Holland\" \nh2[which(h2$Method==\"H2Piepho\"),]$H_lab     <- \"H2 Piepho\"\nh2[which(h2$Method==\"H2Cullis\"),]$H_lab     <- \"H2 Cullis\"\nh2[which(h2$Method==\"H2RegPred\"),]$H_lab    <- \"H2 BLUE~BLUP\"\nh2[which(h2$Method==\"H2RegPred2\"),]$H_lab   <- \"H2 BLUE~BLUP v2\"\nh2[which(h2$Method==\"H2RegPred3\"),]$H_lab   <- \"H2 BLUE~BLUP v3\"\nh2[which(h2$Method==\"H2SumDSum\"),]$H_lab    <- \"H2 Sum/Sum\"\nh2[which(h2$Method==\"H2SumDSum2\"),]$H_lab   <- \"H2 Sum/Sum v2\"\n\n# reduce to relevant methods\nh2 <- subset(h2, Method==\"H2Standard\" |\n                 Method==\"H2Holland\"  |\n                 Method==\"H2Piepho\"   |\n                 Method==\"H2Cullis\"   |\n                 Method==\"H2RegPred\")\n\nh2$VC   <- gubs(\"_\",\" \",h2$VC)\nh2$Data <- gubs(\"_\",\" \",h2$Data)\n           \n\nh2file <- paste(\"DATA/OUTPUT_H2.txt\",sep=\"\")\nwrite.table(h2, h2file, sep=\"\\t\",row.names=F)\n\nh2_own <- subset(h2, VC==Data)\nownh2file <- paste(\"DATA/OUTPUT_H2_nur_eigene_VC.txt\",sep=\"\")\nwrite.table(h2_own, ownh2file, sep=\"\\t\",row.names=F)\n\n\n# trial dimensions H2 standard + harmonic\nn_output<- data.frame(Data=c(\"B2_PC\",\"B2_PC\",\"B2_PC\",\n                             \"B2_BSA\",\"B2_BSA\",\"B2_BSA\",\n                             \"B3_PC\",\"B3_PC\",\"B3_PC\",\n                             \"B3_BSA\",\"B3_BSA\",\"B3_BSA\"),\n                      rbind(\n                        round(trialdims[[1,1]],1),\n                        round(trialdims[[2,2]],1),\n                        round(trialdims[[3,3]],1),\n                        round(trialdims[[4,4]],1)))\nn_output$n <- rownames(n_output)\nn_file     <- paste(\"DATA/OUTPUT_n_output.txt\",sep=\"\")\nwrite.table(n_output, n_file, sep=\"\\t\",row.names=F)\n\n",
    "created" : 1513006460518.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2784907665",
    "id" : "D2C18D94",
    "lastKnownWriteTime" : 1513088831,
    "last_content_update" : 1513088831572,
    "path" : "D:/User/pschmidt/Desktop/Rath/Final/Publication/SCRIPT/3 Heritability estimation (fixed VC).R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}