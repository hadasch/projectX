raw$G     <- as.factor(raw$Variety)
raw$L     <- as.factor(raw$Location)
raw$Y     <- as.factor(raw$t.k)
raw$Rep   <- as.factor(raw$Rep)
raw$Group <- as.factor(raw$Group)
data <- raw[ ,c("Y", "t.k", "r.i", "L", "Env", "G", "Rep", "Group", "Yield")]
# Reduce the dataset to only those 9 columns we name above.
write.table(data, "formatted data.txt", sep="\t"))
# Quick export of formatted dataset in our working directory folder.
###################################################
### Step 3: Mean yield per genotype and environment
###################################################
library(data.table)
# activates package "data.table", given it is already installed.
# compared to the default "data.frame" format, the "data.table" format of
# any dataset in R is advantageous in many situations.
data <- as.data.table(data) # reformat our data to "data.table" format
data[ , mean.yield:=mean(Yield), by=c("Env", "G")] # creates column "mean.yield"
# This way of getting the mean is part of the data.table package/format.
# It creates gets the mean of the numbers in the "Yield" columns for each "Env"-"G"
# combination and saves it into a new column called "mean.yield".
data <- data[ , -c("Rep", "Yield")] # Drop "Rep" and "Yield" column.
# They are now unnessary, since we focus on the mean yields
meandata <- unique(data)            # Drop duplicate rows
write.table(meandata, "GxEmeans.txt", sep="\t")
# Export meandata as text file
saveRDS(meandata, "GxEmeans.rds")
##########################################################
### Step 1: Import meandata (created in previous R script)
##########################################################
rm(list=ls())
setwd("C:/Users/Paul/Desktop/Hands on training")
meandata <- readRDS("GxEmeans.rds")
asreml(fixed  = mean.yield ~ r.i + t.k,
random = ~ G + L + Y + Y:L + L:G + Y:G,
data   = meandata)
# Same model as Step 4b in first R script
mod.group <- asreml(fixed  = mean.yield ~ 0 + Group + Group:r.i + t.k,
random = ~ G + L + Y + Y:L + L:G + Y:G,
data   = meandata)
summary(mod.group)
x <- summary(mod.group)
mod.group$coefficients
mod.group$coefficients$fixed
# (Shukla's) Stability variance per genotype
mod.stabvar <- asreml(fixed  = mean.yield ~ 0 + Group + Group:r.i + t.k,
random = ~ G + L + Y + Y:L + L:G + Y:G,
rcov   = at(G):units,
data   = meandata)
# (Shukla's) Stability variance per genotype
mod.stabvar <- asreml(fixed  = mean.yield ~ 0 + Group + Group:r.i + t.k,
random = ~ G + L + Y + Y:L + L:G + Y:G,
rcov   = ~ at(G):units,
data   = meandata)
summary(mod.stabvar)$varcomp
summary(mod.stabvar)$varcomp[,c("component", "standard.error")]
summary(mod.stabvar)$varcomp[,c("component", "std.error")]
summary(mod.group)$varcomp
##########################
### Step 1: Import dataset
##########################
rm(list=ls()) # remove everything from environment (i.e. clean up)
setwd("C:/Users/Paul/Desktop/Hands on training")
# set the working directory to the folder you are working in.
# Here is the easy way to get this code the first time you do it in a new project:
# 1. In the "Files" Tab of RStudio, click on the three dots on the top right corner
# 2. A window pops up. Select your folder
# 3. You can now see the content of your selected folder in the "Files" Tab
# 4. Click on the "More" button at the top of the "Files" Tab
# 5. Click on "Set as Working directoy"
# 6. You can now see the correct "setwd(.....)" command in the Console window of RStudio
# 7. Copy this command into your R script
raw <- read.delim("20171212 Corrected Final GG Boro 09.08.2017.txt")
# read.delim imports tab-delimited txt files.
# Note that you can get information about any function in R, by running the function
# with a question mark before it. You will then see additional info in the "Help"
# Tab of RStudio. For example, try running: ?read.delim
##########################
### Step 2: Format dataset
##########################
# All columns of your dataset (or at least the ones you are going to use) need to be
# formatted correctly. Usually this means, that they need to be either numeric(metric)
# or a factor (categorical). If you are not sure what the difference is, you can
# find multiple explanations on the internet. E.g.:
# http://www.dummies.com/education/math/statistics/types-of-statistical-data-numerical-categorical-and-ordinal/
# You can check what format your columns are by going to the "Environment"
# tab in RStudio and clicking on the small blue button next to your dataset. It shows
# you all the columns in your dataset and which format they are. Common formats are
# "int", "chr", "num" and "Factor." I suggest you define all your columns as either
# numeric ("num") or a factor.
# In addition, I like to give my columns short names, as it makes writing (=coding)
# R scripts easier.
# Harder to format columns:
raw$t.k   <- as.numeric(substr(raw$Year, 1, 4))
# Extract the first four symbols of the "Year" column and define it as the numeric
# column "t.k". This means e.g. for the first data row that from the cell entry
# "2001-2002", we extract "2001" and make it numeric i.e. the number 2001.
raw$Env   <- as.factor(paste(raw$Year, raw$Location, sep="-"))
# Combine the cell entries of the columns "Y" and "L" with a "-" in between them. This
# means e.g. for the first data row we get "2001" and "Barisal" and combine it into
# "2001-Barisal"
# Easy to format columns:
# Copy/overwrite already existing columns, but define them in the
# correct format (num or Factor) and give them shorter names
raw$r.i   <- as.numeric(raw$Year.of.release)
raw$G     <- as.factor(raw$Variety)
raw$L     <- as.factor(raw$Location)
raw$Y     <- as.factor(raw$t.k)
raw$Rep   <- as.factor(raw$Rep)
raw$Group <- as.factor(raw$Group)
data <- raw[ ,c("Y", "t.k", "r.i", "L", "Env", "G", "Rep", "Group", "Yield")]
# Reduce the dataset to only those 9 columns we name above.
write.table(data, "formatted data.txt", sep="\t"))
# Quick export of formatted dataset in our working directory folder.
###################################################
### Step 3: Mean yield per genotype and environment
###################################################
library(data.table)
# activates package "data.table", given it is already installed.
# compared to the default "data.frame" format, the "data.table" format of
# any dataset in R is advantageous in many situations.
data <- as.data.table(data) # reformat our data to "data.table" format
data[ , mean.yield:=mean(Yield), by=c("Env", "G")] # creates column "mean.yield"
# This way of getting the mean is part of the data.table package/format.
# It creates gets the mean of the numbers in the "Yield" columns for each "Env"-"G"
# combination and saves it into a new column called "mean.yield".
data <- data[ , -c("Rep", "Yield")] # Drop "Rep" and "Yield" column.
# They are now unnessary, since we focus on the mean yields
meandata <- unique(data)            # Drop duplicate rows
write.table(meandata, "GxEmeans.txt", sep="\t")
# Export meandata as text file
saveRDS(meandata, "GxEmeans.rds")
# Additionally export meandata as an rds file. These files contain all the information
# of an R object - for example whether a column is numeric of a factor. Such
# information is lost, when exporting and reimporting a .txt file.
##################################################
### Step 4: Estimate genetic trends in mixed model
##################################################
# Two packages required: lme4, lmerTest
library(lme4)
library(lmerTest)
write.table(data, "formatted data.txt", sep="\t")
data
write.table(data, "formatted data.txt", row.names = F, sep="\t")
# Quick export of formatted dataset in our working directory folder.
fwrite(data, "formatted data.txt")
# Quick export of formatted dataset in our working directory folder.
fwrite(data, "formatted data.txt", sep="\t")
rm(list=ls())
setwd("C:/Users/Paul/Desktop/Bangladesh")
# load required packages
library(ggplot2)
library(gridExtra)
list.data <- readRDS("list_data.rds")
aman <- list.data[["aman"]][["GxE means"]]
aman$dataset <- "aman"
boro <- list.data[["boro"]][["GxE means"]]
boro$dataset <- "boro"
dat <- rbind(aman, boro)
rm(list=ls())
library(asreml)
library(nadiv)
library(ggrepel)
setwd("C:/Users/Paul/Desktop/Bangladesh")
list.data <- readRDS("list_data.rds")
stab <- matrix(list(), 1, 2)
colnames(stab) <- c("aman", "boro")
rownames(stab) <- c("Stab.var")
for (s.d in names(list.data)) {
dat <- list.data[[s.d]][["GxE means"]]
asr <- asreml(fixed   = G.adj.mean ~ G + t.k,
random  = ~ L + Y + Y:L + L:G + Y:G + at(G):Y:L,
weights = w.G,
family  = asreml.gaussian(dispersion=1.0),
data    = dat, ran.order = "user")
# VC formatting
vc1 <- data.table(summary(asr)$varcomp,  keep.rownames="CovParm")
vc2 <- data.table(   aiCI(asr),          keep.rownames="CovParm")
vc  <- vc2[vc1, .(CovParm, LCL, estimate, UCL, std.error), on="CovParm"]
rm(vc1, vc2)
is.at    <- str_detect(substr(vc$CovParm,1,3), "at\\(")
vc <- vc[is.at]
vc$CovParm <- str_match(vc$CovParm, levels(dat$G))
colnames(vc) <- c("G", "lcl.vc", "vc", "ucl.vc", "se.vc")
# BLUE formatting
BLUE <- predict(asr, classify="G")$predictions$pvals[,c(1,2,3)]
colnames(BLUE) <- c("G", "BLUE", "se.BLUE")
# combining values
stab[[1,s.d]] <- data.table(merge(BLUE, vc, by="G"))
}
stab <- data.table(plyr::ldply(stab[1,], data.frame, .id="dataset"))
show <- stab$vc > 0.5
categ <- stab$G %in% c("BRRI dhan53", "BRRI dhan57", "BRRI dhan66")
stab$col <- "one"
stab[categ]$col <- "two"
p <- ggplot(data=stab, aes(x=vc, y=BLUE))
p <- p + geom_point()
p <- p + facet_grid(. ~ dataset)
p <- p + labs(ylab("Adj. mean per genotype ± s.e."))
p <- p + ylim(c(0,max(stab$BLUE+stab$se.BLUE)))
p <- p + xlab("Stability variance ± s.e.")
p <- p + xlim(c(0,max(stab$vc+stab$se.vc)))
p <- p + theme_bw()
p <- p + geom_pointrange(aes(ymin=BLUE-se.BLUE, ymax=BLUE+se.BLUE), color="black")
p <- p + geom_errorbarh(aes(xmin=vc-se.vc, xmax=vc+se.vc), color="black")
p <- p + geom_text_repel(data=stab[show],
aes(label = G), nudge_y = 0.3)
pdf("mean_var.pdf", height=5, width=8)
p
dev.off()
system(paste0('open "', getwd(),'/','mean_var.pdf"'))
stab
colnames(stab)
stab[,-c("lcl.vc")]
stab[,-c("lcl.vc", "ucl.vc")]
stab <- stab[,-c("lcl.vc", "ucl.vc")]
colnames(stab) <- c("dataset", "G", "adj. mean yield", "s.e. mean yield",
"stability variance", "s.e. stability variance")
stab
stab <- stab[,-c("lcl.vc", "ucl.vc", "col")]
colnames(stab) <- c("dataset", "G", "adj. mean yield", "s.e. mean yield",
"stability variance", "s.e. stability variance")
stab
rm(list=ls())
library(asreml)
library(nadiv)
library(ggrepel)
setwd("C:/Users/Paul/Desktop/Bangladesh")
list.data <- readRDS("list_data.rds")
stab <- matrix(list(), 1, 2)
colnames(stab) <- c("aman", "boro")
rownames(stab) <- c("Stab.var")
for (s.d in names(list.data)) {
dat <- list.data[[s.d]][["GxE means"]]
asr <- asreml(fixed   = G.adj.mean ~ G + t.k,
random  = ~ L + Y + Y:L + L:G + Y:G + at(G):Y:L,
weights = w.G,
family  = asreml.gaussian(dispersion=1.0),
data    = dat, ran.order = "user")
# VC formatting
vc1 <- data.table(summary(asr)$varcomp,  keep.rownames="CovParm")
vc2 <- data.table(   aiCI(asr),          keep.rownames="CovParm")
vc  <- vc2[vc1, .(CovParm, LCL, estimate, UCL, std.error), on="CovParm"]
rm(vc1, vc2)
is.at    <- str_detect(substr(vc$CovParm,1,3), "at\\(")
vc <- vc[is.at]
vc$CovParm <- str_match(vc$CovParm, levels(dat$G))
colnames(vc) <- c("G", "lcl.vc", "vc", "ucl.vc", "se.vc")
# BLUE formatting
BLUE <- predict(asr, classify="G")$predictions$pvals[,c(1,2,3)]
colnames(BLUE) <- c("G", "BLUE", "se.BLUE")
# combining values
stab[[1,s.d]] <- data.table(merge(BLUE, vc, by="G"))
}
stab <- data.table(plyr::ldply(stab[1,], data.frame, .id="dataset"))
show <- stab$vc > 0.5
categ <- stab$G %in% c("BRRI dhan53", "BRRI dhan57", "BRRI dhan66")
stab$col <- "one"
stab[categ]$col <- "two"
p <- ggplot(data=stab, aes(x=vc, y=BLUE))
p <- p + geom_point()
p <- p + facet_grid(. ~ dataset)
p <- p + labs(ylab("Adj. mean per genotype ± s.e."))
p <- p + ylim(c(0,max(stab$BLUE+stab$se.BLUE)))
p <- p + xlab("Stability variance ± s.e.")
p <- p + xlim(c(0,max(stab$vc+stab$se.vc)))
p <- p + theme_bw()
p <- p + geom_pointrange(aes(ymin=BLUE-se.BLUE, ymax=BLUE+se.BLUE), color="black")
p <- p + geom_errorbarh(aes(xmin=vc-se.vc, xmax=vc+se.vc), color="black")
p <- p + geom_text_repel(data=stab[show],
aes(label = G), nudge_y = 0.3)
pdf("mean_var.pdf", height=5, width=8)
p
dev.off()
stab <- stab[,-c("lcl.vc", "ucl.vc", "col")]
colnames(stab) <- c("dataset", "G", "adj. mean yield", "s.e. mean yield",
"stability variance", "s.e. stability variance")
stab
fwrite(stab, "results yield-stability.txt", sep="\t")
round(stab, 3)
colnames(stab)
round(stab[,3:6], 3)
stab[,3:6] <- round(stab[,3:6], 3)
stab
rm(list=ls())
library(asreml)
library(nadiv)
library(ggrepel)
setwd("C:/Users/Paul/Desktop/Bangladesh")
list.data <- readRDS("list_data.rds")
stab <- matrix(list(), 1, 2)
colnames(stab) <- c("aman", "boro")
rownames(stab) <- c("Stab.var")
for (s.d in names(list.data)) {
dat <- list.data[[s.d]][["GxE means"]]
asr <- asreml(fixed   = G.adj.mean ~ G + t.k,
random  = ~ L + Y + Y:L + L:G + Y:G + at(G):Y:L,
weights = w.G,
family  = asreml.gaussian(dispersion=1.0),
data    = dat, ran.order = "user")
# VC formatting
vc1 <- data.table(summary(asr)$varcomp,  keep.rownames="CovParm")
vc2 <- data.table(   aiCI(asr),          keep.rownames="CovParm")
vc  <- vc2[vc1, .(CovParm, LCL, estimate, UCL, std.error), on="CovParm"]
rm(vc1, vc2)
is.at    <- str_detect(substr(vc$CovParm,1,3), "at\\(")
vc <- vc[is.at]
vc$CovParm <- str_match(vc$CovParm, levels(dat$G))
colnames(vc) <- c("G", "lcl.vc", "vc", "ucl.vc", "se.vc")
# BLUE formatting
BLUE <- predict(asr, classify="G")$predictions$pvals[,c(1,2,3)]
colnames(BLUE) <- c("G", "BLUE", "se.BLUE")
# combining values
stab[[1,s.d]] <- data.table(merge(BLUE, vc, by="G"))
}
stab <- data.table(plyr::ldply(stab[1,], data.frame, .id="dataset"))
show <- stab$vc > 0.5
categ <- stab$G %in% c("BRRI dhan53", "BRRI dhan57", "BRRI dhan66")
stab$col <- "one"
stab[categ]$col <- "two"
p <- ggplot(data=stab, aes(x=vc, y=BLUE))
p <- p + geom_point()
p <- p + facet_grid(. ~ dataset)
p <- p + labs(ylab("Adj. mean per genotype ± s.e."))
p <- p + ylim(c(0,max(stab$BLUE+stab$se.BLUE)))
p <- p + xlab("Stability variance ± s.e.")
p <- p + xlim(c(0,max(stab$vc+stab$se.vc)))
p <- p + theme_bw()
p <- p + geom_pointrange(aes(ymin=BLUE-se.BLUE, ymax=BLUE+se.BLUE), color="black")
p <- p + geom_errorbarh(aes(xmin=vc-se.vc, xmax=vc+se.vc), color="black")
p <- p + geom_text_repel(data=stab[show],
aes(label = G), nudge_y = 0.3)
pdf("mean_var.pdf", height=5, width=8)
p
dev.off()
stab[,3:6] <- round(stab[,3:6], 3)
stab <- stab[,-c("lcl.vc", "ucl.vc", "col")]
colnames(stab) <- c("dataset", "G", "adj. mean yield", "s.e. mean yield",
"stability variance", "s.e. stability variance")
fwrite(stab, "results yield-stability.txt", sep="\t")
rm(list=ls())
library(asreml)
library(nadiv)
library(ggrepel)
setwd("C:/Users/Paul/Desktop/Bangladesh")
list.data <- readRDS("list_data.rds")
stab <- matrix(list(), 1, 2)
colnames(stab) <- c("aman", "boro")
rownames(stab) <- c("Stab.var")
for (s.d in names(list.data)) {
dat <- list.data[[s.d]][["GxE means"]]
asr <- asreml(fixed   = G.adj.mean ~ G + t.k,
random  = ~ L + Y + Y:L + L:G + Y:G + at(G):Y:L,
weights = w.G,
family  = asreml.gaussian(dispersion=1.0),
data    = dat, ran.order = "user")
# VC formatting
vc1 <- data.table(summary(asr)$varcomp,  keep.rownames="CovParm")
vc2 <- data.table(   aiCI(asr),          keep.rownames="CovParm")
vc  <- vc2[vc1, .(CovParm, LCL, estimate, UCL, std.error), on="CovParm"]
rm(vc1, vc2)
is.at    <- str_detect(substr(vc$CovParm,1,3), "at\\(")
vc <- vc[is.at]
vc$CovParm <- str_match(vc$CovParm, levels(dat$G))
colnames(vc) <- c("G", "lcl.vc", "vc", "ucl.vc", "se.vc")
# BLUE formatting
BLUE <- predict(asr, classify="G")$predictions$pvals[,c(1,2,3)]
colnames(BLUE) <- c("G", "BLUE", "se.BLUE")
# combining values
stab[[1,s.d]] <- data.table(merge(BLUE, vc, by="G"))
}
stab <- data.table(plyr::ldply(stab[1,], data.frame, .id="dataset"))
show <- stab$vc > 0.5
categ <- stab$G %in% c("BRRI dhan53", "BRRI dhan57", "BRRI dhan66")
stab$col <- "one"
stab[categ]$col <- "two"
p <- ggplot(data=stab, aes(x=vc, y=BLUE))
p <- p + geom_point()
p <- p + facet_grid(. ~ dataset)
p <- p + labs(ylab("Adj. mean per genotype ± s.e."))
p <- p + ylim(c(0,max(stab$BLUE+stab$se.BLUE)))
p <- p + xlab("Stability variance ± s.e.")
p <- p + xlim(c(0,max(stab$vc+stab$se.vc)))
p <- p + theme_bw()
p <- p + geom_pointrange(aes(ymin=BLUE-se.BLUE, ymax=BLUE+se.BLUE), color="black")
p <- p + geom_errorbarh(aes(xmin=vc-se.vc, xmax=vc+se.vc), color="black")
p <- p + geom_text_repel(data=stab[show],
aes(label = G), nudge_y = 0.3)
pdf("mean_var.pdf", height=5, width=8)
p
dev.off()
stab[,3:7] <- round(stab[,3:7], 3)
stab <- stab[,-c("lcl.vc", "ucl.vc", "col")]
colnames(stab) <- c("dataset", "G", "adj. mean yield", "s.e. mean yield",
"stability variance", "s.e. stability variance")
fwrite(stab, "results yield-stability.txt", sep="\t")
stab
stab[,3:7]
stab[,3:6] <- round(stab[,3:6], 3)
stab
rm(list=ls())
library(asreml)
library(nadiv)
library(ggrepel)
setwd("C:/Users/Paul/Desktop/Bangladesh")
list.data <- readRDS("list_data.rds")
stab <- matrix(list(), 1, 2)
colnames(stab) <- c("aman", "boro")
rownames(stab) <- c("Stab.var")
for (s.d in names(list.data)) {
dat <- list.data[[s.d]][["GxE means"]]
asr <- asreml(fixed   = G.adj.mean ~ G + t.k,
random  = ~ L + Y + Y:L + L:G + Y:G + at(G):Y:L,
weights = w.G,
family  = asreml.gaussian(dispersion=1.0),
data    = dat, ran.order = "user")
# VC formatting
vc1 <- data.table(summary(asr)$varcomp,  keep.rownames="CovParm")
vc2 <- data.table(   aiCI(asr),          keep.rownames="CovParm")
vc  <- vc2[vc1, .(CovParm, LCL, estimate, UCL, std.error), on="CovParm"]
rm(vc1, vc2)
is.at    <- str_detect(substr(vc$CovParm,1,3), "at\\(")
vc <- vc[is.at]
vc$CovParm <- str_match(vc$CovParm, levels(dat$G))
colnames(vc) <- c("G", "lcl.vc", "vc", "ucl.vc", "se.vc")
# BLUE formatting
BLUE <- predict(asr, classify="G")$predictions$pvals[,c(1,2,3)]
colnames(BLUE) <- c("G", "BLUE", "se.BLUE")
# combining values
stab[[1,s.d]] <- data.table(merge(BLUE, vc, by="G"))
}
stab <- data.table(plyr::ldply(stab[1,], data.frame, .id="dataset"))
show <- stab$vc > 0.5
categ <- stab$G %in% c("BRRI dhan53", "BRRI dhan57", "BRRI dhan66")
stab$col <- "one"
stab[categ]$col <- "two"
p <- ggplot(data=stab, aes(x=vc, y=BLUE))
p <- p + geom_point()
p <- p + facet_grid(. ~ dataset)
p <- p + labs(ylab("Adj. mean per genotype ± s.e."))
p <- p + ylim(c(0,max(stab$BLUE+stab$se.BLUE)))
p <- p + xlab("Stability variance ± s.e.")
p <- p + xlim(c(0,max(stab$vc+stab$se.vc)))
p <- p + theme_bw()
p <- p + geom_pointrange(aes(ymin=BLUE-se.BLUE, ymax=BLUE+se.BLUE), color="black")
p <- p + geom_errorbarh(aes(xmin=vc-se.vc, xmax=vc+se.vc), color="black")
p <- p + geom_text_repel(data=stab[show],
aes(label = G), nudge_y = 0.3)
pdf("mean_var.pdf", height=5, width=8)
p
dev.off()
stab[,3:6] <- round(stab[,3:6], 3)
stab <- stab[,-c("lcl.vc", "ucl.vc", "col")]
colnames(stab) <- c("dataset", "G", "adj. mean yield", "s.e. mean yield",
"stability variance", "s.e. stability variance")
fwrite(stab, "results yield-stability.txt", sep="\t")
rm(list=ls())
library(asreml)
library(nadiv)
library(ggrepel)
setwd("C:/Users/Paul/Desktop/Bangladesh")
list.data <- readRDS("list_data.rds")
stab <- matrix(list(), 1, 2)
colnames(stab) <- c("aman", "boro")
rownames(stab) <- c("Stab.var")
for (s.d in names(list.data)) {
dat <- list.data[[s.d]][["GxE means"]]
asr <- asreml(fixed   = G.adj.mean ~ G + t.k,
random  = ~ L + Y + Y:L + L:G + Y:G + at(G):Y:L,
weights = w.G,
family  = asreml.gaussian(dispersion=1.0),
data    = dat, ran.order = "user")
# VC formatting
vc1 <- data.table(summary(asr)$varcomp,  keep.rownames="CovParm")
vc2 <- data.table(   aiCI(asr),          keep.rownames="CovParm")
vc  <- vc2[vc1, .(CovParm, LCL, estimate, UCL, std.error), on="CovParm"]
rm(vc1, vc2)
is.at    <- str_detect(substr(vc$CovParm,1,3), "at\\(")
vc <- vc[is.at]
vc$CovParm <- str_match(vc$CovParm, levels(dat$G))
colnames(vc) <- c("G", "lcl.vc", "vc", "ucl.vc", "se.vc")
# BLUE formatting
BLUE <- predict(asr, classify="G")$predictions$pvals[,c(1,2,3)]
colnames(BLUE) <- c("G", "BLUE", "se.BLUE")
# combining values
stab[[1,s.d]] <- data.table(merge(BLUE, vc, by="G"))
}
stab <- data.table(plyr::ldply(stab[1,], data.frame, .id="dataset"))
show <- stab$vc > 0.5
categ <- stab$G %in% c("BRRI dhan53", "BRRI dhan57", "BRRI dhan66")
stab$col <- "one"
stab[categ]$col <- "two"
p <- ggplot(data=stab, aes(x=vc, y=BLUE))
p <- p + geom_point()
p <- p + facet_grid(. ~ dataset)
p <- p + labs(ylab("Adj. mean per genotype ± s.e."))
p <- p + ylim(c(0,max(stab$BLUE+stab$se.BLUE)))
p <- p + xlab("Stability variance ± s.e.")
p <- p + xlim(c(0,max(stab$vc+stab$se.vc)))
p <- p + theme_bw()
p <- p + geom_pointrange(aes(ymin=BLUE-se.BLUE, ymax=BLUE+se.BLUE), color="black")
p <- p + geom_errorbarh(aes(xmin=vc-se.vc, xmax=vc+se.vc), color="black")
p <- p + geom_text_repel(data=stab[show],
aes(label = G), nudge_y = 0.3)
pdf("mean_var.pdf", height=5, width=8)
p
dev.off()
stab <- stab[,-c("lcl.vc", "ucl.vc", "col")]
stab[,3:6] <- round(stab[,3:6], 3)
colnames(stab) <- c("dataset", "G", "adj. mean yield", "s.e. mean yield",
"stability variance", "s.e. stability variance")
fwrite(stab, "results yield-stability.txt", sep="\t")
